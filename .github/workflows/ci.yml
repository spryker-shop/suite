name: SN-CI

on:
    pull_request:
        types: [ labeled, unlabeled, synchronize, opened ]
    push:
        branches:
            - master
    workflow_dispatch:

env:
    GITHUB_TOKEN: ${{ secrets.SPRYKER_BOT_TOKEN }}
    SNYK_TOKEN: ${{ secrets.SNYK_CLI_TOKEN }}
    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    WEEKLY_CI_SLACK_CHANNEL_ID: ${{ secrets.WEEKLY_CI_SLACK_CHANNEL_ID }}
    JIRA_TICKET_SLACK_USER_GROUP_MAPPING: ${{ secrets.JIRA_TICKET_SLACK_USER_GROUP_MAPPING }}
    ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    # scan-credentials:
    #     name: "Scan for Credentials"
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout code
    #           uses: actions/checkout@v4
    #           with:
    #               fetch-depth: 0

    #         - name: Run TruffleHog OSS
    #           uses: trufflesecurity/trufflehog@v3.90.8
    #           with:
    #               extra_args: --log-level=2 --results=verified,unknown

    # standard-validation:
    #     name: "Standard Validation"
    #     runs-on: ubuntu-latest
    #     env:
    #         APPLICATION_ENV: ci.mysql
    #         PROJECT: suite-nonsplit
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: "true"
    #         DB_USER: root
    #         DB_PASSWORD: ""
    #         DB_HOST: 127.0.0.1
    #         DB_PORT: 3306

    #     services:
    #         mysql:
    #             image: mysql:5.7
    #             env:
    #                 MYSQL_ROOT_PASSWORD: ""
    #                 MYSQL_ALLOW_EMPTY_PASSWORD: 1
    #                 MYSQL_DATABASE: DE_test_zed
    #             ports:
    #                 - 3306:3306
    #             options: >-
    #                 --health-cmd="mysqladmin ping"
    #                 --health-interval=10s
    #                 --health-timeout=5s
    #                 --health-retries=3
    #         rabbitmq:
    #             image: rabbitmq:3.8-management
    #             ports:
    #                 - 5672:5672
    #             options: >-
    #                 --health-cmd "rabbitmq-diagnostics -q ping"
    #                 --health-interval 10s
    #                 --health-timeout 5s
    #                 --health-retries 5
    #         redis:
    #             image: redis:alpine
    #             ports:
    #                 - 6379:6379
    #             options: >-
    #                 --health-cmd "redis-cli ping"
    #                 --health-interval 10s
    #                 --health-timeout 5s
    #                 --health-retries 5

    #     steps:
    #         -   uses: actions/checkout@v4
    #         -   name: Cache Composer
    #             uses: actions/cache@v4
    #             with:
    #                 path: |
    #                     ~/.composer/cache
    #                     vendor
    #                 key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
    #                 restore-keys: |
    #                     ${{ runner.os }}-composer-

    #         -   name: Setup PHP
    #             uses: shivammathur/setup-php@v2
    #             with:
    #                 php-version: '8.3'
    #                 extensions: mbstring, intl, pdo_mysql, redis, grpc, protobuf, opentelemetry
    #                 tools: composer:v2
    #                 coverage: none

    #         -   name: Setup Node.js
    #             uses: actions/setup-node@v4
    #             with:
    #                 node-version: '18'

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   uses: ramsey/composer-install@v3
    #             env:
    #                 COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ env.GITHUB_TOKEN }}"}}'
    #             with:
    #                 composer-options: "--optimize-autoloader --no-interaction --prefer-install=auto"

    #         -   name: Run Spryker install
    #             run: |
    #                 vendor/bin/install --no-ansi -r ci.code-generate
    #                 composer dump-autoload -o -a --apcu

    #         -   name: Run Evaluator
    #             run: vendor/bin/evaluator evaluate --exclude-checkers=SPRYKER_DEV_PACKAGES_CHECKER,MINIMUM_ALLOWED_SHOP_VERSION --format=compact

    #         -   name: Install OpenAPI validator
    #             run: npm install -g speccy@0.11.0

    #         -   name: Validate OpenAPI schemas
    #             continue-on-error: true
    #             run: |
    #                 speccy lint src/Generated/Glue/Specification/spryker_rest_api.schema.yml --rules=default
    #                 speccy lint src/Generated/GlueStorefront/Specification/spryker_storefront_api.schema.yml --rules=default --skip openapi-tags
    #                 speccy lint src/Generated/GlueBackend/Specification/spryker_backend_api.schema.yml --rules=default --skip openapi-tags

    #         -   name: Run Generic Validation
    #             run: |
    #                 vendor/bin/console --no-ansi code:propel:validate-abstract
    #                 vendor/bin/console --no-ansi propel:schema:validate
    #                 vendor/bin/console --no-ansi propel:schema:validate-xml-names
    #                 vendor/bin/console --no-ansi transfer:validate
    #                 vendor/bin/spryker-dev-console dev:validate-module-schemas
    #                 vendor/bin/spryker-dev-console dev:validate-module-databuilders
    #                 vendor/bin/console --no-ansi dev:composer:replace -d -v
    #                 vendor/bin/spryker-dev-console dev:sync-composer -d
    #                 vendor/bin/spryker-dev-console dev:module-meta-files -d -v
    #                 vendor/bin/console --no-ansi dev:composer:update-json-files -d -v
    #                 vendor/bin/console --no-ansi dev:composer:validate-json-files
    #                 vendor/bin/console --no-ansi code:sniff:style
    #                 vendor/bin/phpmd src/ text vendor/spryker/architecture-sniffer/src/ruleset.xml --minimumpriority 2

    #         -   name: Run PHP 8.3 specific validations
    #             run: |
    #                 vendor/bin/console --no-ansi dev:dependency:find
    #                 vendor/bin/spryker-dev-console dev:deprecation-links:check
    #                 tests/ci_check_untracked.sh
    #                 tests/ci_check_touched_modules.sh

    #         -   name: Run PHPStan (spryker/spryker [1/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 0 275

    #         -   name: Run PHPStan (spryker/spryker [2/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 275 275

    #         -   name: Run PHPStan (spryker/spryker [3/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 550 150

    #         -   name: Run PHPStan (spryker/spryker [4/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 700 300

    #         -   name: Run PHPStan (spryker/spryker [5/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 1000

    #         -   name: Run PHPStan (spryker/spryker feature)
    #             run: tests/spryker-ci.sh phpStan SprykerFeature

    #         -   name: Run PHPStan (spryker/spryker-shop)
    #             run: tests/spryker-ci.sh phpStan SprykerShop

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # standard-validation-prefer-lowest:
    #     name: "Standard Validation / Prefer Lowest"
    #     runs-on: ubuntu-latest
    #     env:
    #         APPLICATION_ENV: ci.mysql
    #         APPLICATION_STORE: DE
    #         PROJECT: suite-nonsplit
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: "false"
    #         COMPOSER_MEMORY_LIMIT: -1
    #         DB_USER: root
    #         DB_PASSWORD: ""
    #         DB_HOST: 127.0.0.1
    #         DB_PORT: 3306

    #     services:
    #         mysql:
    #             image: mysql:5.7
    #             env:
    #                 MYSQL_ROOT_PASSWORD: ""
    #                 MYSQL_ALLOW_EMPTY_PASSWORD: 1
    #                 MYSQL_DATABASE: DE_test_zed
    #             ports:
    #                 - 3306:3306
    #             options: >-
    #                 --health-cmd="mysqladmin ping"
    #                 --health-interval=10s
    #                 --health-timeout=5s
    #                 --health-retries=3
    #         rabbitmq:
    #             image: rabbitmq:3.8-management
    #             ports:
    #                 - 5672:5672
    #             options: >-
    #                 --health-cmd "rabbitmq-diagnostics -q ping"
    #                 --health-interval 10s
    #                 --health-timeout 5s
    #                 --health-retries 5
    #         redis:
    #             image: redis:alpine
    #             ports:
    #                 - 6379:6379
    #             options: >-
    #                 --health-cmd "redis-cli ping"
    #                 --health-interval 10s
    #                 --health-timeout 5s
    #                 --health-retries 5

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Cache Composer
    #             uses: actions/cache@v4
    #             with:
    #                 path: |
    #                     ~/.composer/cache
    #                     vendor
    #                 key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
    #                 restore-keys: |
    #                     ${{ runner.os }}-composer-

    #         -   name: Setup PHP
    #             uses: shivammathur/setup-php@v2
    #             with:
    #                 php-version: '8.2'
    #                 extensions: mbstring, intl, pdo_pgsql, pgsql, redis, grpc, protobuf, opentelemetry
    #                 tools: composer:v2
    #                 coverage: none

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   uses: ramsey/composer-install@v3
    #             env:
    #                 COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ env.GITHUB_TOKEN }}"}}'
    #             with:
    #                 composer-options: "--optimize-autoloader --no-interaction --prefer-install=auto"
    #                 dependency-versions: "lowest"

    #         -   name: Run Spryker install
    #             run: |
    #                 vendor/bin/install --no-ansi -r ci.code-generate
    #                 composer dump-autoload -o -a --apcu

    #         -   name: Run PHPStan (spryker/spryker [1/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 0 275

    #         -   name: Run PHPStan (spryker/spryker [2/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 275 275

    #         -   name: Run PHPStan (spryker/spryker [3/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 550 150

    #         -   name: Run PHPStan (spryker/spryker [4/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 700 300

    #         -   name: Run PHPStan (spryker/spryker [5/5])
    #             run: tests/spryker-ci.sh phpStan Spryker 1000

    #         -   name: Run PHPStan (spryker/spryker feature)
    #             run: tests/spryker-ci.sh phpStan SprykerFeature

    #         -   name: Run PHPStan (spryker/spryker-shop)
    #             run: tests/spryker-ci.sh phpStan SprykerShop

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # phpstan-validation:
    #     name: "PHPStan Validation"
    #     runs-on: ubuntu-latest
    #     if: contains(github.event.pull_request.labels.*.name, 'run-phpstan-core-ci')
    #     env:
    #         APPLICATION_ENV: ci.mysql
    #         DB_USER: root
    #         DB_PASS: ""
    #         DB_HOST: 127.0.0.1
    #         DB_PORT: 3306
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: "true"

    #     services:
    #         mysql:
    #             image: mysql:5.7
    #             env:
    #                 MYSQL_ROOT_PASSWORD: ""
    #                 MYSQL_ALLOW_EMPTY_PASSWORD: 1
    #                 MYSQL_DATABASE: DE_test_zed
    #             ports:
    #                 - 3306:3306
    #             options: >-
    #                 --health-cmd="mysqladmin ping"
    #                 --health-interval=10s
    #                 --health-timeout=5s
    #                 --health-retries=3
    #         rabbitmq:
    #             image: rabbitmq:3.8-management
    #             ports:
    #                 - 5672:5672
    #             options: >-
    #                 --health-cmd "rabbitmq-diagnostics -q ping"
    #                 --health-interval 10s
    #                 --health-timeout 5s
    #                 --health-retries 5
    #         redis:
    #             image: redis:alpine
    #             ports:
    #                 - 6379:6379
    #             options: >-
    #                 --health-cmd "redis-cli ping"
    #                 --health-interval 10s
    #                 --health-timeout 5s
    #                 --health-retries 5

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Cache Composer
    #             uses: actions/cache@v4
    #             with:
    #                 path: |
    #                     ~/.composer/cache
    #                     vendor
    #                 key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
    #                 restore-keys: |
    #                     ${{ runner.os }}-composer-


    #         -   name: Setup PHP
    #             uses: shivammathur/setup-php@v2
    #             with:
    #                 php-version: '8.3'
    #                 extensions: mbstring, intl, pdo_mysql, redis, grpc, protobuf
    #                 tools: composer:v2
    #                 coverage: none

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   uses: ramsey/composer-install@v3
    #             env:
    #                 COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ env.GITHUB_TOKEN }}"}}'
    #             with:
    #                 composer-options: "--optimize-autoloader --no-interaction --prefer-install=auto"

    #         -   name: Setup Spryker
    #             run: |
    #                 vendor/bin/install -r ci.code-generate
    #                 composer dump-autoload -o -a --apcu

    #         -   name: Run PHPStan (spryker/spryker [1/5])
    #             run: vendor/bin/console --no-ansi code:phpstan -m Spryker.all -v -o 0,275

    #         -   name: Run PHPStan (spryker/spryker [2/5])
    #             run: vendor/bin/console --no-ansi code:phpstan -m Spryker.all -v -o 275,275

    #         -   name: Run PHPStan (spryker/spryker [3/5])
    #             run: vendor/bin/console --no-ansi code:phpstan -m Spryker.all -v -o 550,150

    #         -   name: Run PHPStan (spryker/spryker [4/5])
    #             run: vendor/bin/console --no-ansi code:phpstan -m Spryker.all -v -o 700,300

    #         -   name: Run PHPStan (spryker/spryker [5/5])
    #             run: vendor/bin/console --no-ansi code:phpstan -m Spryker.all -v -o 1000

    #         -   name: Run PHPStan (spryker/spryker feature)
    #             run: vendor/bin/console --no-ansi code:phpstan -m SprykerFeature.all -v

    #         -   name: Run PHPStan (spryker/spryker-shop)
    #             run: vendor/bin/console --no-ansi code:phpstan -m SprykerShop.all -v

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # snyk-validation:
    #     name: "Snyk Validation"
    #     runs-on: ubuntu-latest

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Setup Node.js
    #             uses: actions/setup-node@v3
    #             with:
    #                 node-version: '18'
    #                 cache: 'npm'

    #         -   name: Install Snyk
    #             run: npm install --global snyk

    #         -   name: Run Snyk monitor
    #             continue-on-error: true  # Continue even if monitor fails
    #             run: snyk monitor --all-projects --org=c408eea4-f0a4-4d7a-846d-5457aefa0cac --exclude=project.json,docker

    #         -   name: Run Snyk test
    #             run: snyk test --fail-on=all --all-projects --org=c408eea4-f0a4-4d7a-846d-5457aefa0cac --severity-threshold=high --exclude=project.json,docker

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # js-validation:
    #     name: "NPM validation"
    #     runs-on: ubuntu-latest
    #     strategy:
    #         fail-fast: false
    #         matrix:
    #             node-version: [ '18' ]

    #     env:
    #         APPLICATION_ENV: ci.mysql
    #         PROJECT: suite-nonsplit

    #     steps:
    #         -   uses: actions/checkout@v4
    #         -   name: Cache Node.js modules
    #             uses: actions/cache@v4
    #             with:
    #                 path: ~/.npm
    #                 key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
    #                 restore-keys: |
    #                     ${{ runner.os }}-node-
    #         -   name: Install NPM packages
    #             run: npm ci

    #         -   name: Style lint
    #             run: npm run yves:stylelint

    #         -   name: ES lint
    #             run: npm run yves:lint

    #         -   name: Front-end Formatter
    #             run: npm run formatter

    #         -   name: Front-end MP Lint
    #             run: npm run mp:lint

    #         -   name: Front-end MP Style lint
    #             run: npm run mp:stylelint

    #         -   name: Front-end MP Unit Tests
    #             run: npm run mp:test

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-83-mariadb-acceptance-alpine:
    #     name: "[run-ui-ci] PHP 8.3 / MariaDB / Acceptance & API / Alpine"
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-api-ci')
    #         || github.ref == 'refs/heads/master'
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: true
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Run docker
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.acceptance.mariadb.yml
    #                 docker/sdk up -t
    #                 docker/sdk testing composer dump-autoload -o -a --apcu
    #                 docker/sdk testing codecept fixtures
    #                 docker/sdk testing console queue:worker:start --stop-when-empty

    #         -   name: Run Acceptance Tests
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #                 || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk testing codecept run -c codeception.acceptance.yml

    #         -   name: Run API Tests
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-api-ci')
    #                 || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk testing codecept run -c codeception.api.yml

    #         -   name: Run Presentation Tests for changed modules
    #             run: docker/sdk testing bash tests/spryker-ci.sh Codeception all null null --group=Presentation

    #         -   name: Save PHP logs
    #             if: failure()
    #             run: |
    #                 mkdir -p logs
    #                 docker logs spryker_ci_backoffice_eu_1 > logs/backoffice_app.log 2>&1
    #                 docker logs spryker_ci_glue_eu_1 > logs/glue_app.log 2>&1
    #                 docker logs spryker_ci_yves_eu_1 > logs/yves_app.log 2>&1
    #                 docker logs spryker_ci_merchant_portal_eu_1 > logs/merchant_portal_app.log 2>&1

    #         -   name: Upload Failed Screenshots and HTML
    #             if: always()
    #             uses: actions/upload-artifact@v4
    #             with:
    #                 name: codeception-failed-artifacts
    #                 retention-days: 5 # save for 5 days
    #                 path: |
    #                     logs/*.log
    #                     tests/**/_output/**/*
    #                     vendor/spryker/spryker/Bundles/**/tests/_output/*

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-83-mariadb-functional-alpine:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-functional-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-ssp-latest-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-functional-ci] PHP 8.3 / MariaDB / Functional / Alpine"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: true
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Run docker
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.functional.mariadb.yml
    #                 docker/sdk up -t
    #                 docker/sdk cli composer dump-autoload -o -a --apcu

    #         -   name: Run Functional Tests
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #                 ||
    #                 contains(github.event.pull_request.labels.*.name, 'run-functional-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.stage0.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.stage1.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional2.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.stage2.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.glue.yml

    #         -   name: Run Functional Tests (SSP)
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-ssp-latest-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.feature.yml

    #         - name: Run Functional Tests for changed modules
    #           run: docker/sdk testing bash tests/spryker-ci.sh Codeception all null null --skip-group=Presentation

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-82-postgres-acceptance-debian-prefer-lowest-dynamic-store-off:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-compatibility-ci] PHP 8.2 / PostgreSQL / Acceptance & API / Debian / Prefer Lowest / Dynamic Store OFF"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Setup PHP
    #             uses: shivammathur/setup-php@v2
    #             with:
    #                 php-version: '8.2'
    #                 tools: composer:v2
    #                 coverage: none

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   uses: ramsey/composer-install@v3
    #             env:
    #                 COMPOSER_AUTH: '{"github-oauth": {"github.com": "${{ env.GITHUB_TOKEN }}"}}'
    #             with:
    #                 composer-options: "--ignore-platform-reqs --optimize-autoloader --no-interaction --prefer-install=auto"
    #                 dependency-versions: "lowest"

    #         -   name: Run docker
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.acceptance.dynamic-store-off.prefer-lowest.php82.es6.yml
    #                 docker/sdk up -t
    #                 docker/sdk cli composer dump-autoload -o -a --apcu
    #                 docker/sdk testing codecept fixtures
    #                 docker/sdk testing console queue:worker:start --stop-when-empty

    #         -   name: Run Acceptance Tests
    #             run: |
    #                 docker/sdk testing codecept run -c codeception.acceptance.yml

    #         -   name: Run API Tests
    #             run: |
    #                 docker/sdk testing codecept run -c codeception.api.yml

    #         -   name: Save PHP logs
    #             if: failure()
    #             run: |
    #                 mkdir -p logs
    #                 docker logs spryker_ci_backoffice_eu_1 > logs/backoffice_app.log 2>&1
    #                 docker logs spryker_ci_glue_eu_1 > logs/glue_app.log 2>&1
    #                 docker logs spryker_ci_yves_eu_1 > logs/yves_app.log 2>&1
    #                 docker logs spryker_ci_merchant_portal_eu_1 > logs/merchant_portal_app.log 2>&1

    #         -   name: Upload Failed Screenshots and HTML
    #             if: always()
    #             uses: actions/upload-artifact@v4
    #             with:
    #                 name: codeception-failed-artifacts
    #                 retention-days: 5 # save for 5 days
    #                 path: |
    #                     logs/*.log
    #                     tests/**/_output/**/*
    #                     vendor/spryker/spryker/Bundles/**/tests/_output/*

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-82-postgres-debian-robot-ui-dynamic-store-off-group-one:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-compatibility-ci] PHP 8.2 / PostgreSQL / Debian / Robot / UI / Dynamic Store OFF / Group One"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Install robotframework-suite-tests folder
    #             run: |
    #                 cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                 cp -r vendor ../vendor
    #         -   name: Install Project
    #             continue-on-error: false
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.acceptance.dynamic-store-off.php82.robot.yml
    #                 docker/sdk up
    #                 docker/sdk cli composer dump-autoload -o -a --apcu
    #         -   name: Run Tests
    #             continue-on-error: true
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:ui_suite -v dms:false -v headless:true -v ignore_console:false -v db_engine:psycopg2 -v docker:True -d results --exclude skip-due-to-issueORskip-due-to-refactoring --include group_oneANDsmoke -s robotframework.tests.ui.suite .
    #         -   name: Rerun Tests
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:ui_suite -v dms:false -v headless:true -v ignore_console:false -v db_engine:psycopg2 -v docker:True -d results/rerun --runemptysuite --rerunfailed results/output.xml --output rerun.xml -s robotframework.tests.ui.suite .
    #         -   name: Upload artifacts
    #             if: failure()
    #             run: |
    #                 aws configure set default.s3.max_concurrent_requests 80
    #                 aws configure set default.s3.max_queue_size 6000
    #                 aws configure set default.s3.multipart_threshold 36MB
    #                 aws configure set default.s3.multipart_chunksize 16MB
    #                 AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/robot-ui/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/group1/log.html
    #                 echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-off/robot-ui/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/group1/log.html"
    #                 echo "You must have VPN access to AWS (Spryker-Internal account)"
    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-82-postgres-debian-robot-ui-dynamic-store-off-group-two:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-compatibility-ci] PHP 8.2 / PostgreSQL / Debian / Robot / UI / Dynamic Store OFF / Group Two"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Install robotframework-suite-tests folder
    #             run: |
    #                 cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                 cp -r vendor ../vendor
    #         -   name: Install Project
    #             continue-on-error: false
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.acceptance.dynamic-store-off.php82.robot.yml
    #                 docker/sdk up
    #                 docker/sdk cli composer dump-autoload -o -a --apcu
    #         -   name: Run Tests
    #             continue-on-error: true
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:ui_suite -v dms:false -v headless:true -v ignore_console:false -v db_engine:psycopg2 -v docker:True -d results --exclude skip-due-to-issueORskip-due-to-refactoring --include group_twoANDsmoke -s robotframework.tests.ui.suite .
    #         -   name: Rerun Tests
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:ui_suite -v dms:false -v headless:true -v ignore_console:false -v db_engine:psycopg2 -v docker:True -d results/rerun --runemptysuite --rerunfailed results/output.xml --output rerun.xml -s robotframework.tests.ui.suite .
    #         -   name: Upload artifacts
    #             if: failure()
    #             run: |
    #                 aws configure set default.s3.max_concurrent_requests 80
    #                 aws configure set default.s3.max_queue_size 6000
    #                 aws configure set default.s3.multipart_threshold 36MB
    #                 aws configure set default.s3.multipart_chunksize 16MB
    #                 AWS_DEFAULT_REGION=${{ env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{ vars.ROBOT_TESTS_ARTIFACTS_BUCKET }}/suite-nonsplit/dms-off/robot-ui/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/group2/log.html
    #                 echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/suite-nonsplit/dms-off/robot-ui/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/group2/log.html"
    #                 echo "You must have VPN access to AWS (Spryker-Internal account)"
    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-82-postgres-debian-robot-ui-dynamic-store-off-group-three:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-compatibility-ci] PHP 8.2 / PostgreSQL / Debian / Robot / UI / Dynamic Store OFF / Group Three"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Install robotframework-suite-tests folder
    #             run: |
    #                 cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                 cp -r vendor ../vendor
    #         -   name: Install Project
    #             continue-on-error: false
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.acceptance.dynamic-store-off.php82.robot.yml
    #                 docker/sdk up
    #                 docker/sdk cli composer dump-autoload -o -a --apcu
    #         -   name: Run Tests
    #             continue-on-error: true
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:ui_suite -v dms:false -v headless:true -v ignore_console:false -v db_engine:psycopg2 -v docker:True -d results --exclude skip-due-to-issueORskip-due-to-refactoring --include group_treeANDsmoke -s robotframework.tests.ui.suite .
    #         -   name: Rerun Tests
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:ui_suite -v dms:false -v headless:true -v ignore_console:false -v db_engine:psycopg2 -v docker:True -d results/rerun --runemptysuite --rerunfailed results/output.xml --output rerun.xml -s robotframework.tests.ui.suite .
    #         -   name: Upload artifacts
    #             if: failure()
    #             run: |
    #                 aws configure set default.s3.max_concurrent_requests 80
    #                 aws configure set default.s3.max_queue_size 6000
    #                 aws configure set default.s3.multipart_threshold 36MB
    #                 aws configure set default.s3.multipart_chunksize 16MB
    #                 AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/robot-ui/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/group3/log.html
    #                 echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/suite-nonsplit/dms-off/robot-ui/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/group3/log.html"
    #                 echo "You must have VPN access to AWS (Spryker-Internal account)"
    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-82-postgres-functional-debian-prefer-lowest-dynamic-store-off:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-ssp-compatibility-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-compatibility-ci] PHP 8.2 / PostgreSQL / Functional / Debian / Prefer Lowest / Dynamic Store OFF"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
    #         TRAVIS: 1
    #         DOCKER_PHP_EXTENSIONS: 'protobuf grpc opentelemetry'

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Setup PHP
    #             uses: shivammathur/setup-php@v2
    #             with:
    #                 php-version: '8.2'
    #                 extensions: grpc, protobuf, opentelemetry
    #                 tools: composer:v2
    #                 coverage: none

    #         -   name: Install Composer dependencies (prefer-lowest)
    #             run: |
    #                 composer config github-oauth.github.com ${{ env.GITHUB_TOKEN }}
    #                 composer update --prefer-lowest --optimize-autoloader --no-interaction --prefer-install=auto
    #                 composer require --dev dereuromark/composer-prefer-lowest:dev-master --with-all-dependencies

    #         -   name: Install docker-compose
    #             run: |
    #                 sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    #                 sudo chmod +x /usr/local/bin/docker-compose

    #         -   name: Run docker
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.functional.postgres.dynamic-store-off.prefer-lowest.php82.es6.yml
    #                 docker/sdk up -t
    #                 docker/sdk cli composer dump-autoload -o -a --apcu

    #         -   name: Run Functional Tests
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.stage0.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.stage1.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional2.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.stage2.yml
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.glue.yml

    #         -   name: Run Functional Tests (SSP)
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-ssp-compatibility-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk testing codecept run --no-ansi -c codeception.functional.feature.yml

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # php-83-frontend-and-assets-alpine:
    #     name: "[run-functional-ci] PHP 8.3 / Frontend & Assets / Alpine"
    #     runs-on: ubuntu-latest
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-functional-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #         || github.ref == 'refs/heads/master'
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: true
    #         TRAVIS: 1

    #     steps:
    #         -   uses: actions/checkout@v4

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Run docker
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.yml
    #                 SPRYKER_BUILD_HASH=myhash docker/sdk export images
    #                 docker run -i --rm -e SPRYKER_NGINX_CGI_HOST_YVES_EU=localhost -e SPRYKER_NGINX_CGI_HOST_BACKOFFICE_EU=localhost -e SPRYKER_NGINX_CGI_HOST_BACKEND_GATEWAY_EU=localhost -e SPRYKER_NGINX_CGI_HOST_BACKEND_API_EU=localhost -e SPRYKER_NGINX_CGI_HOST_GLUE_EU=localhost -e SPRYKER_NGINX_CGI_HOST_CONFIGURATOR_EU=localhost -e SPRYKER_NGINX_CGI_HOST_YVES_US=localhost -e SPRYKER_NGINX_CGI_HOST_GLUE_US=localhost -e SPRYKER_NGINX_CGI_HOST_BACKOFFICE_US=localhost -e SPRYKER_NGINX_CGI_HOST_BACKEND_GATEWAY_US=localhost -e SPRYKER_NGINX_CGI_HOST_BACKEND_API_US=localhost -e ALLOWED_IP=127.0.0.1 spryker_demo_frontend:1.0-frontend nginx -t
    #                 docker run -i --rm --entrypoint='' spryker_demo_frontend:1.0-frontend ls -al /data/public/Yves/assets/myhash
    #                 docker run -i --rm --entrypoint='' spryker_demo_frontend:1.0-frontend ls -al /data/public/Zed/assets/

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # docker-debian-php-82-postgres-robot-dynamic-store-off:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-compatibility-ci] PHP 8.2 / Debian / PostgreSQL / Robot / API / Dynamic Store OFF"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
    #         TRAVIS: 1
    #         ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1
    #     steps:
    #         -   uses: actions/checkout@v4
    #         -   name: Cache pip
    #             uses: actions/cache@v4
    #             with:
    #                 path: ~/.cache/pip
    #                 key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #                 restore-keys: |
    #                     ${{ runner.os }}-pip-

    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Install packages
    #             run: |
    #                 sudo apt-get update
    #                 sudo apt-get install -y python3-pip
    #                 pip3 install --upgrade pip
    #                 pip3 install awscli
    #         -   name: Install robotframework-suite-tests folder
    #             run: |
    #                 cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                 cp -r vendor ../vendor
    #         -   name: Install Project
    #             continue-on-error: false
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.api.dynamic-store-off.php82.postgres.robot.yml
    #                 docker/sdk up
    #                 docker/sdk cli composer dump-autoload -o -a --apcu
    #         -   name: Run Tests
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:api_suite -v dms:false -v docker:true -v db_engine:psycopg2 -v ignore_console:false --exclude skip-due-to-issueORskip-due-to-refactoring -d results -s '*'.tests.api.suite .
    #         -   name: Upload artifacts
    #             if: failure()
    #             run: |
    #                 aws configure set default.s3.max_concurrent_requests 80
    #                 aws configure set default.s3.max_queue_size 6000
    #                 aws configure set default.s3.multipart_threshold 36MB
    #                 aws configure set default.s3.multipart_chunksize 16MB
    #                 AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/robot-api/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/log.html
    #                 echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/suite-nonsplit/dms-off/robot-api/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/log.html"
    #                 echo "You must have VPN access to AWS (Spryker-Internal account)"
    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # docker-alpine-php-83-mariadb-robot-api:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-api-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-api-ci] PHP 8.3 / MariaDB / Robot / API"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #         TRAVIS: 1
    #         ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1
    #         SPRYKER_CURRENT_REGION: EU
    #         SPRYKER_DYNAMIC_STORE_MODE: true
    #     steps:
    #         -   uses: actions/checkout@v4
    #         -   name: Cache pip
    #             uses: actions/cache@v4
    #             with:
    #                 path: ~/.cache/pip
    #                 key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #                 restore-keys: |
    #                     ${{ runner.os }}-pip-
    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536

    #         -   name: Install packages
    #             run: |
    #                 sudo apt-get update
    #                 sudo apt-get install -y python3-pip
    #                 pip3 install --upgrade pip
    #                 pip3 install awscli
    #         -   name: Install robotframework-suite-tests folder
    #             run: |
    #                 cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                 cp -r vendor ../vendor
    #         -   name: Install Project
    #             continue-on-error: false
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.api.mariadb.robot.yml
    #                 docker/sdk up
    #                 docker/sdk cli composer dump-autoload -o -a --apcu
    #         -   name: Run Tests
    #             run: |
    #                 docker/sdk exec robot-framework robot -v env:api_suite -v dms:true -v docker:true -d results --exclude skip-due-to-issueORskip-due-to-refactoring -s '*'.tests.api.suite .
    #         -   name: Upload artifacts
    #             if: failure()
    #             run: |
    #                 aws configure set default.s3.max_concurrent_requests 80
    #                 aws configure set default.s3.max_queue_size 6000
    #                 aws configure set default.s3.multipart_threshold 36MB
    #                 aws configure set default.s3.multipart_chunksize 16MB
    #                 AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-on/robot-api/${GITHUB_RUN_ID}/PHP8.3MariaDB/log.html
    #                 echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-on/robot-api/${GITHUB_RUN_ID}/PHP8.3MariaDB/log.html"
    #                 echo "You must have VPN access to AWS (Spryker-Internal account)"

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()

    # docker-alpine-php-83-mariadb-robot-ui-group-one:
    #         if: >
    #             contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #             || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #             || github.ref == 'refs/heads/master'
    #         name: "[run-ui-ci] PHP 8.3 / MariaDB / Robot / UI / Group One"
    #         runs-on: ubuntu-latest
    #         env:
    #             PROGRESS_TYPE: plain
    #             SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #             TRAVIS: 1
    #             SPRYKER_CURRENT_REGION: EU
    #             SPRYKER_DYNAMIC_STORE_MODE: true
    #         steps:
    #             -   uses: actions/checkout@v4
    #             -   name: Cache pip
    #                 uses: actions/cache@v4
    #                 with:
    #                     path: ~/.cache/pip
    #                     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #                     restore-keys: |
    #                         ${{ runner.os }}-pip-
    #             -   name: Configure sysctl limits
    #                 run: |
    #                     sudo sysctl -w vm.swappiness=10
    #                     sudo sysctl -w fs.file-max=262144
    #                     sudo sysctl -w vm.max_map_count=262144
    #                     ulimit -n 65536
    #             -   name: Install packages
    #                 run: |
    #                     sudo apt-get update
    #                     sudo apt-get install -y python3-pip
    #                     pip3 install --upgrade pip
    #                     pip3 install awscli
    #             -   name: Install robotframework-suite-tests folder
    #                 run: |
    #                     cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                     cp -r vendor ../vendor
    #             -   name: Install Project
    #                 continue-on-error: false
    #                 run: |
    #                     git clone https://github.com/spryker/docker-sdk.git ./docker
    #                     docker/sdk boot deploy.ci.acceptance.mariadb.robot.yml
    #                     docker/sdk up
    #                     docker/sdk cli composer dump-autoload -o -a --apcu
    #             -   name: Run Tests
    #                 continue-on-error: true
    #                 run: |
    #                     docker/sdk exec robot-framework robot -v env:ui_suite -v headless:true -v ignore_console:false -v docker:True -v dms:true -v glue_env:http://glue.eu.spryker.local -v bapi_env:http://glue-backend.eu.spryker.local -v sapi_env:http://glue-storefront.eu.spryker.local -v yves_env:http://yves.eu.spryker.local/ -v zed_env:http://backoffice.eu.spryker.local -v mp_root_env:http://mp.eu.spryker.local -v mp_env:http://mp.eu.spryker.local/security-merchant-portal-gui/login/ -d results --exclude skip-due-to-issueORskip-due-to-refactoring --include group_oneANDsmoke -s robotframework.tests.ui.suite .
    #             -   name: Rerun Tests
    #                 run: |
    #                     docker/sdk exec robot-framework robot -v env:ui_suite -v headless:true -v ignore_console:false -v docker:True -v dms:true -v glue_env:http://glue.eu.spryker.local -v bapi_env:http://glue-backend.eu.spryker.local -v sapi_env:http://glue-storefront.eu.spryker.local -v yves_env:http://yves.eu.spryker.local/ -v zed_env:http://backoffice.eu.spryker.local -v mp_root_env:http://mp.eu.spryker.local -v mp_env:http://mp.eu.spryker.local/security-merchant-portal-gui/login/ -d results/rerun --runemptysuite --rerunfailed results/output.xml --output rerun.xml -s robotframework.tests.ui.suite .
    #             -   name: Upload artifacts
    #                 if: failure()
    #                 run: |
    #                     aws configure set default.s3.max_concurrent_requests 80
    #                     aws configure set default.s3.max_queue_size 6000
    #                     aws configure set default.s3.multipart_threshold 36MB
    #                     aws configure set default.s3.multipart_chunksize 16MB
    #                     AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-on/robot-ui/${GITHUB_RUN_ID}/PHP8.3MariaDB/group1/log.html
    #                     echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-on/robot-ui/${GITHUB_RUN_ID}/PHP8.3MariaDB/group1/log.html"
    #                     echo "You must have VPN access to AWS (Spryker-Internal account)"

    #             -   name: Slack Notification for failed job
    #                 uses: ./.github/actions/job-slack-notifications
    #                 if: always()
    # docker-alpine-php-83-mariadb-robot-ui-group-two:
    #         if: >
    #             contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #             || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #             || github.ref == 'refs/heads/master'
    #         name: "[run-ui-ci] PHP 8.3 / MariaDB / Robot / UI / Group Two"
    #         runs-on: ubuntu-latest
    #         env:
    #             PROGRESS_TYPE: plain
    #             SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #             TRAVIS: 1
    #             SPRYKER_CURRENT_REGION: EU
    #             SPRYKER_DYNAMIC_STORE_MODE: true
    #         steps:
    #             -   uses: actions/checkout@v4
    #             -   name: Cache pip
    #                 uses: actions/cache@v4
    #                 with:
    #                     path: ~/.cache/pip
    #                     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #                     restore-keys: |
    #                         ${{ runner.os }}-pip-
    #             -   name: Configure sysctl limits
    #                 run: |
    #                     sudo sysctl -w vm.swappiness=10
    #                     sudo sysctl -w fs.file-max=262144
    #                     sudo sysctl -w vm.max_map_count=262144
    #                     ulimit -n 65536
    #             -   name: Install packages
    #                 run: |
    #                     sudo apt-get update
    #                     sudo apt-get install -y python3-pip
    #                     pip3 install --upgrade pip
    #                     pip3 install awscli
    #             -   name: Install robotframework-suite-tests folder
    #                 run: |
    #                     cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                     cp -r vendor ../vendor
    #             -   name: Install Project
    #                 continue-on-error: false
    #                 run: |
    #                     git clone https://github.com/spryker/docker-sdk.git ./docker
    #                     docker/sdk boot deploy.ci.acceptance.mariadb.robot.yml
    #                     docker/sdk up
    #                     docker/sdk cli composer dump-autoload -o -a --apcu
    #             -   name: Run Tests
    #                 continue-on-error: true
    #                 run: |
    #                     docker/sdk exec robot-framework robot -v env:ui_suite -v headless:true -v ignore_console:false -v docker:True -v dms:true -v glue_env:http://glue.eu.spryker.local -v bapi_env:http://glue-backend.eu.spryker.local -v sapi_env:http://glue-storefront.eu.spryker.local -v yves_env:http://yves.eu.spryker.local/ -v zed_env:http://backoffice.eu.spryker.local -v mp_root_env:http://mp.eu.spryker.local -v mp_env:http://mp.eu.spryker.local/security-merchant-portal-gui/login/ -d results --exclude skip-due-to-issueORskip-due-to-refactoring --include group_twoANDsmoke -s robotframework.tests.ui.suite .
    #             -   name: Rerun Tests
    #                 run: |
    #                     docker/sdk exec robot-framework robot -v env:ui_suite -v headless:true -v ignore_console:false -v docker:True -v dms:true -v glue_env:http://glue.eu.spryker.local -v bapi_env:http://glue-backend.eu.spryker.local -v sapi_env:http://glue-storefront.eu.spryker.local -v yves_env:http://yves.eu.spryker.local -v zed_env:http://backoffice.eu.spryker.local -v mp_root_env:http://mp.eu.spryker.local -v mp_env:http://mp.eu.spryker.local/security-merchant-portal-gui/login/ -d results/rerun --runemptysuite --rerunfailed results/output.xml --output rerun.xml -s robotframework.tests.ui.suite .
    #             -   name: Upload artifacts
    #                 if: failure()
    #                 run: |
    #                     aws configure set default.s3.max_concurrent_requests 80
    #                     aws configure set default.s3.max_queue_size 6000
    #                     aws configure set default.s3.multipart_threshold 36MB
    #                     aws configure set default.s3.multipart_chunksize 16MB
    #                     AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-on/robot-ui/${GITHUB_RUN_ID}/PHP8.3MariaDB/group2/log.html
    #                     echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-on/robot-ui/${GITHUB_RUN_ID}/PHP8.3MariaDB/group2/log.html"
    #                     echo "You must have VPN access to AWS (Spryker-Internal account)"
    #             -   name: Slack Notification for failed job
    #                 uses: ./.github/actions/job-slack-notifications
    #                 if: always()
    # docker-alpine-php-83-mariadb-robot-ui-group-three:
    #         if: >
    #             contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #             || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #             || github.ref == 'refs/heads/master'
    #         name: "[run-ui-ci] PHP 8.3 / MariaDB / Robot / UI / Group Three"
    #         runs-on: ubuntu-latest
    #         env:
    #             PROGRESS_TYPE: plain
    #             SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #             TRAVIS: 1
    #             SPRYKER_CURRENT_REGION: EU
    #             SPRYKER_DYNAMIC_STORE_MODE: true
    #         steps:
    #             -   uses: actions/checkout@v4
    #             -   name: Cache pip
    #                 uses: actions/cache@v4
    #                 with:
    #                     path: ~/.cache/pip
    #                     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    #                     restore-keys: |
    #                         ${{ runner.os }}-pip-
    #             -   name: Configure sysctl limits
    #                 run: |
    #                     sudo sysctl -w vm.swappiness=10
    #                     sudo sysctl -w fs.file-max=262144
    #                     sudo sysctl -w vm.max_map_count=262144
    #                     ulimit -n 65536
    #             -   name: Install packages
    #                 run: |
    #                     sudo apt-get update
    #                     sudo apt-get install -y python3-pip
    #                     pip3 install --upgrade pip
    #                     pip3 install awscli
    #             -   name: Install robotframework-suite-tests folder
    #                 run: |
    #                     cd ./data && composer require "spryker/robotframework-suite-tests:dev-master" --dev --no-interaction
    #                     cp -r vendor ../vendor
    #             -   name: Install Project
    #                 continue-on-error: false
    #                 run: |
    #                     git clone https://github.com/spryker/docker-sdk.git ./docker
    #                     docker/sdk boot deploy.ci.acceptance.mariadb.robot.yml
    #                     docker/sdk up
    #                     docker/sdk cli composer dump-autoload -o -a --apcu
    #             -   name: Run Tests
    #                 continue-on-error: true
    #                 run: |
    #                     docker/sdk exec robot-framework robot -v env:ui_suite -v headless:true -v ignore_console:false -v docker:True -v dms:true -v glue_env:http://glue.eu.spryker.local -v bapi_env:http://glue-backend.eu.spryker.local -v sapi_env:http://glue-storefront.eu.spryker.local -v yves_env:http://yves.eu.spryker.local/ -v zed_env:http://backoffice.eu.spryker.local -v mp_root_env:http://mp.eu.spryker.local -v mp_env:http://mp.eu.spryker.local/security-merchant-portal-gui/login/ -d results --exclude skip-due-to-issueORskip-due-to-refactoring --include group_treeANDsmoke -s robotframework.tests.ui.suite .
    #             -   name: Rerun Tests
    #                 run: |
    #                     docker/sdk exec robot-framework robot -v env:ui_suite -v headless:true -v ignore_console:false -v docker:True -v dms:true -v glue_env:http://glue.eu.spryker.local -v bapi_env:http://glue-backend.eu.spryker.local -v sapi_env:http://glue-storefront.eu.spryker.local -v yves_env:http://yves.eu.spryker.local -v zed_env:http://backoffice.eu.spryker.local -v mp_root_env:http://mp.eu.spryker.local -v mp_env:http://mp.eu.spryker.local/security-merchant-portal-gui/login/ -d results/rerun --runemptysuite --rerunfailed results/output.xml --output rerun.xml -s robotframework.tests.ui.suite .
    #             -   name: Upload artifacts
    #                 if: failure()
    #                 run: |
    #                     aws configure set default.s3.max_concurrent_requests 80
    #                     aws configure set default.s3.max_queue_size 6000
    #                     aws configure set default.s3.multipart_threshold 36MB
    #                     aws configure set default.s3.multipart_chunksize 16MB
    #                     AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .robot/results/log.html s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-on/robot-ui/${GITHUB_RUN_ID}/PHP8.3MariaDB/group3/log.html
    #                     echo "Check the logs - https://s3.console.aws.amazon.com/s3/object/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-on/robot-ui/${GITHUB_RUN_ID}/PHP8.3MariaDB/group3/log.html"
    #                     echo "You must have VPN access to AWS (Spryker-Internal account)"
    #             -   name: Slack Notification for failed job
    #                 uses: ./.github/actions/job-slack-notifications
    #                 if: always()

    docker-debian-php-82-postgresql-cypress-dynamic-store-off:
        if: >
            contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
            || contains(github.event.pull_request.labels.*.name, 'run-ssp-compatibility-ci')
            || github.ref == 'refs/heads/master'
        name: "[run-compatibility-ci] PHP 8.2 / Debian /  PostgreSql / Cypress / Dynamic Store OFF"
        runs-on: ubuntu-latest
        env:
            PROGRESS_TYPE: plain
            SPRYKER_PLATFORM_IMAGE: spryker/php:8.2-debian
            TRAVIS: 1
            ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1

        steps:
            -   uses: actions/checkout@v4
            -   name: Configure sysctl limits
                run: |
                    sudo sysctl -w vm.swappiness=10
                    sudo sysctl -w fs.file-max=262144
                    sudo sysctl -w vm.max_map_count=262144
                    ulimit -n 65536
            -   name: Install packages
                run: |
                    sudo apt-get update
                    sudo apt-get install -y python3-pip
                    pip3 install --upgrade pip
                    pip3 install awscli

            # -   name: Install cypress-tests folder
            #     run: |
            #         cd ./data && composer require "spryker/cypress-tests:dev-master" --dev --no-interaction
            #         cp -r vendor/spryker/cypress-tests ../tests/cypress-tests
            # -   name: Install Project
            #     run: |
            #         git clone https://github.com/spryker/docker-sdk.git ./docker
            #         docker/sdk boot deploy.ci.acceptance.postgres.dynamic-store-off.cypress.yml
            #         docker/sdk up
            #         docker/sdk cli composer dump-autoload -o -a --apcu

            # -   name: Install Cypress
            #     run: |
            #         docker/sdk exec cypress-tests cp .env.example .env
            #         docker/sdk exec cypress-tests npx cypress install

            -   name: Run Tests
                id: core_tests
                continue-on-error: true
                if: >
                    contains(github.event.pull_request.labels.*.name, 'run-compatibility-ci')
                    || github.ref == 'refs/heads/master'
                run: |
                    docker/sdk exec --env "ENV_REPOSITORY_ID=suite" cypress-tests npm run cy:ci

            -   name: Upload artifacts
                continue-on-error: true
                if: always() && steps.core_tests.outcome == 'failure'
                run: |
                    AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .cypress s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/core/ --recursive
                    echo "Check the Cypress screenshots - https://s3.console.aws.amazon.com/s3/buckets/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/screenshots/&showversions=false"'
                    echo "You must have VPN access to AWS (Spryker-Internal account)"

            -   name: Run Tests (SSP)
                id: ssp_tests
                continue-on-error: true
                if: >
                    contains(github.event.pull_request.labels.*.name, 'run-ssp-compatibility-ci')
                    || github.ref == 'refs/heads/master'
                run: |
                    docker/sdk exec --env "ENV_REPOSITORY_ID=suite" cypress-tests npm run cy:ci:ssp

            -   name: Upload SSP artifacts
                if: always() && steps.ssp_tests.outcome == 'failure'
                run: |
                    AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .cypress s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/ssp/ --recursive

            -   name: Output test results
                if: always()
                run: |
                    CORE="${{ steps.core_tests.outcome }}"
                    SSP="${{ steps.ssp_tests.outcome }}"

                    echo "Core tests result: ${CORE}"
                    echo "SSP tests result: ${SSP}"

                    if [[ "${CORE}" == "failure" ]]; then
                        echo "⚠️ Check 'Core' Cypress screenshots - https://s3.console.aws.amazon.com/s3/buckets/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/core/&showversions=false"
                    elif [[ "${SSP}" == "failure" ]]; then
                        echo "⚠️ Check 'SSP' Cypress screenshots - https://s3.console.aws.amazon.com/s3/buckets/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/ssp/&showversions=false"
                    fi

                    if [[ "${CORE}" == "failure" || "${SSP}" == "failure" ]]; then
                    echo "Some tests failed (or did not succeed)."
                    exit 1
                    else
                    echo "All tests passed."
                    exit 0
                    fi

            -   name: Slack Notification for failed job
                uses: ./.github/actions/job-slack-notifications
                if: always()

    # docker-alpine-php-83-mariadb-cypress:
    #     if: >
    #         contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #         || contains(github.event.pull_request.labels.*.name, 'run-ssp-latest-ci')
    #         || github.ref == 'refs/heads/master'
    #     name: "[run-ui-ci] PHP 8.3 / MariaDB / Cypress / UI"
    #     runs-on: ubuntu-latest
    #     env:
    #         PROGRESS_TYPE: plain
    #         SPRYKER_PLATFORM_IMAGE: spryker/php:8.3
    #         TRAVIS: 1
    #         ROBOT_TESTS_ARTIFACTS_BUCKET_REGION: eu-west-1
    #         SPRYKER_CURRENT_REGION: EU
    #         DYNAMIC_STORE_MODE: true
    #     steps:
    #         -   uses: actions/checkout@v4
    #         -   name: Configure sysctl limits
    #             run: |
    #                 sudo sysctl -w vm.swappiness=10
    #                 sudo sysctl -w fs.file-max=262144
    #                 sudo sysctl -w vm.max_map_count=262144
    #                 ulimit -n 65536
    #         -   name: Install packages
    #             run: |
    #                 sudo apt-get update
    #                 sudo apt-get install -y python3-pip
    #                 pip3 install --upgrade pip
    #                 pip3 install awscli

    #         -   name: Install cypress-tests folder
    #             run: |
    #                 cd ./data && composer require "spryker/cypress-tests:dev-master" --dev --no-interaction
    #                 cp -r vendor/spryker/cypress-tests ../tests/cypress-tests

    #         -   name: Install Project
    #             run: |
    #                 git clone https://github.com/spryker/docker-sdk.git ./docker
    #                 docker/sdk boot deploy.ci.acceptance.mariadb.cypress.yml
    #                 docker/sdk up
    #                 docker/sdk cli composer dump-autoload -o -a --apcu

    #         -   name: Install Cypress
    #             continue-on-error: true
    #             run: |
    #                 docker/sdk exec cypress-tests cp .env.dynamic-store.example .env
    #                 docker/sdk exec cypress-tests npx cypress install

    #         -   name: Run Tests
    #             continue-on-error: true
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-latest-ci')
    #                 || contains(github.event.pull_request.labels.*.name, 'run-ui-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk exec --env "ENV_REPOSITORY_ID=suite" cypress-tests npm run cy:ci

    #         -   name: Upload artifacts
    #             continue-on-error: true
    #             if: failure()
    #             run: |
    #                 AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .cypress s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/ --recursive
    #                 echo "Check the Cypress screenshots - https://s3.console.aws.amazon.com/s3/buckets/${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}?region=eu-central-1&prefix=suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/screenshots/&showversions=false"'
    #                 echo "You must have VPN access to AWS (Spryker-Internal account)"

    #         -   name: Run Tests (SSP)
    #             continue-on-error: true
    #             if: >
    #                 contains(github.event.pull_request.labels.*.name, 'run-ssp-latest-ci')
    #                 || github.ref == 'refs/heads/master'
    #             run: |
    #                 docker/sdk exec --env "ENV_REPOSITORY_ID=suite" cypress-tests npm run cy:ci:ssp

    #         -   name: Upload SSP artifacts
    #             if: failure()
    #             run: |
    #                 AWS_DEFAULT_REGION=${{env.ROBOT_TESTS_ARTIFACTS_BUCKET_REGION}} AWS_ACCESS_KEY_ID=${{ secrets.ROBOT_TESTS_ARTIFACTS_KEY }} AWS_SECRET_ACCESS_KEY=${{ secrets.ROBOT_TESTS_ARTIFACTS_SECRET }} aws s3 cp .cypress s3://${{vars.ROBOT_TESTS_ARTIFACTS_BUCKET}}/suite-nonsplit/dms-off/cypress/${GITHUB_RUN_ID}/PHP8.2PostgreSQL/ --recursive

    #         -   name: Slack Notification for failed job
    #             uses: ./.github/actions/job-slack-notifications
    #             if: always()
