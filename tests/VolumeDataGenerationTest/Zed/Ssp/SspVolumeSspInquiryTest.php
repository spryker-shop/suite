<?php

/**
 * This file is part of the Spryker Suite.
 * For full license information, please view the LICENSE file that was distributed with this source code.
 */

declare(strict_types = 1);

namespace VolumeDataGenerationTest\Zed\Ssp;

use Codeception\Test\Unit;
use Generated\Shared\Transfer\StoreTransfer;
use Orm\Zed\Company\Persistence\SpyCompanyQuery;
use Orm\Zed\CompanyUser\Persistence\Map\SpyCompanyUserTableMap;
use Orm\Zed\CompanyUser\Persistence\SpyCompanyUserQuery;
use Orm\Zed\SspInquiryManagement\Persistence\SpySspInquiry;
use Orm\Zed\SspInquiryManagement\Persistence\SpySspInquiryQuery;
use Orm\Zed\StateMachine\Persistence\SpyStateMachineItemStateQuery;
use Orm\Zed\StateMachine\Persistence\SpyStateMachineProcessQuery;
use Orm\Zed\Store\Persistence\SpyStoreQuery;
use Ramsey\Uuid\Uuid;

/**
 * Generates inquiries with type general.
 *
 * Recommendation: run it after companies generation.
 *
 * @group VolumeDataGenerationTest
 * @group Ssp
 * @group SspVolumeSspInquiryTest
 * @group GeneralSspInquiries
 */
class SspVolumeSspInquiryTest extends Unit
{
    /**
     * Total amount of ssp inquiries with type `general` which will be generated by the test run.
     *
     * @var int
     */
    protected const SSP_GENERAL_INQUIRY_COUNT = 750000;

    /**
     * @var int
     */
    /**
     * Ssp assets and company users are fetched by batches for avoiding memory issues.
     *
     * @var int
     */
    protected const BATCH_SIZE = 1000;

    /**
     * @var \Generated\Shared\Transfer\StoreTransfer
     */
    protected StoreTransfer $storeTransfer;

    /**
     * @var \VolumeDataGenerationTest\Zed\Ssp\SspTester
     */
    protected SspTester $tester;

    /**
     * @return void
     */
    protected function _before(): void
    {
        $this->storeTransfer = (new StoreTransfer())->setName('DE')->setIdStore(
            SpyStoreQuery::create()->findOneByName('DE')->getIdStore(),
        );
    }

    /**
     * @return void
     */
    public function testGenerateGeneralInquiries(): void
    {
        $existingGeneralInquiryCount = SpySspInquiryQuery::create()->filterByType('general')->count();

        if ($existingGeneralInquiryCount >= self::SSP_GENERAL_INQUIRY_COUNT) {
            $this->assertTrue(false, SspTester::ALL_ENTITIES_GENERATED_MESSAGE);

            return;
        }

        $iteration = 0;
        $companyCount = SpyCompanyQuery::create()->count();

        if (isset($_SERVER['ITERATION'])) { // phpcs:ignore SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable
            $iteration = $companyCount % ((int)$_SERVER['ITERATION'] + 1); // phpcs:ignore SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable
        }

        $companyOffset = $iteration * self::BATCH_SIZE;

        $companyIds = SpyCompanyUserQuery::create()
            ->select([SpyCompanyUserTableMap::COL_ID_COMPANY_USER])
            ->offset(self::BATCH_SIZE * $companyOffset)
            ->limit(self::BATCH_SIZE)
            ->find()
            ->getData();

        $stateMachineProcessEntity = SpyStateMachineProcessQuery::create()->findOneByStateMachineName('SspInquiry');
        $stateMachineItemStateId = SpyStateMachineItemStateQuery::create()->findOneByFkStateMachineProcess($stateMachineProcessEntity->getIdStateMachineProcess())->getIdStateMachineItemState();

        for ($i = 0; $i < self::SSP_GENERAL_INQUIRY_COUNT - $existingGeneralInquiryCount; $i++) {
            $sspInquiryEntity = (new SpySspInquiry())
                ->setFkCompanyUser(array_shift($companyIds))
                ->setFkStore($this->storeTransfer->getIdStore())
                ->setType('general')
                ->setFkStateMachineItemState($stateMachineItemStateId)
                ->setSubject('Test subject')
                ->setDescription('Test description')
                ->setReference(Uuid::uuid4());

            $sspInquiryEntity->save();
        }

        $this->assertTrue(
            false,
            sprintf('%s %s', SspTester::GENERATION_RESULT_TEXT, sprintf('%d general inquiries were generated. Left to generate %d general inquiries.', self::SSP_GENERAL_INQUIRY_COUNT - $existingGeneralInquiryCount, self::SSP_GENERAL_INQUIRY_COUNT - SpySspInquiryQuery::create()->filterByType('general')->count())),
        );
    }
}
