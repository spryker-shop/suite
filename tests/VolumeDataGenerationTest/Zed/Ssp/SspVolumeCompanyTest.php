<?php

/**
 * This file is part of the Spryker Suite.
 * For full license information, please view the LICENSE file that was distributed with this source code.
 */

declare(strict_types = 1);

namespace VolumeDataGenerationTest\Zed\Ssp;

use Codeception\Test\Unit;
use Generated\Shared\Transfer\CompanyBusinessUnitTransfer;
use Generated\Shared\Transfer\CompanyTransfer;
use Generated\Shared\Transfer\CompanyUserTransfer;
use Orm\Zed\Company\Persistence\SpyCompanyQuery;
use Orm\Zed\CompanyBusinessUnit\Persistence\Map\SpyCompanyBusinessUnitTableMap;
use Orm\Zed\CompanyBusinessUnit\Persistence\SpyCompanyBusinessUnitQuery;

/**
 * Generates companies, business units and company users.
 *
 * Recommendation: run it before generation of company dependent entities.
 *
 * @group VolumeDataGenerationTest
 * @group Ssp
 * @group SspVolumeCompanyTest
 * @group Companies
 */
class SspVolumeCompanyTest extends Unit
{
    /**
     * Total amount of companies, business units and company users which will be generated by the test run.
     * Existing companies without business unit or company user are not taken to calculation of total companies amount.
     *
     * @var int
     */
    protected const COMPANY_COUNT = 10000;

    /**
     * Used for speedding up data generation and avouding memory issues.
     *
     * @var int
     */
    protected const BATCH_SIZE = 1000;

    protected const LOCALE_CURRENT = 'LOCALE_CURRENT';

    protected SspTester $tester;

    /**
     * @return void
     */
    protected function _before(): void
    {
        $this->tester->setDependency(static::LOCALE_CURRENT, 'en_US');
    }

    /**
     * @return void
     */
    public function testGenerateCompanies(): void
    {
        $customerTransfer = $this->tester->haveCustomer();

        // only companies with business unit and company user are calculated
        $existingCompanyCount = SpyCompanyQuery::create()->useCompanyBusinessUnitExistsQuery()->useCompanyUserExistsQuery()->endUse()->endUse()->count();

        if ($existingCompanyCount >= self::COMPANY_COUNT) {
            $this->assertTrue(false, SspTester::ALL_ENTITIES_GENERATED_MESSAGE);

            return;
        }

        $createdCompanyIds = [];

        for ($i = 0; $i < min(self::COMPANY_COUNT - $existingCompanyCount, self::BATCH_SIZE); $i++) { // phpcs:ignore Generic.CodeAnalysis.ForLoopWithTestFunctionCall
            $companyTransfer = $this->tester->haveCompany(); // business unit is also generated
            $createdCompanyIds[] = $companyTransfer->getIdCompany();
        }

        $businessUnitData = SpyCompanyBusinessUnitQuery::create()
            ->select([SpyCompanyBusinessUnitTableMap::COL_ID_COMPANY_BUSINESS_UNIT, SpyCompanyBusinessUnitTableMap::COL_FK_COMPANY])
            ->filterByFkCompany_In($createdCompanyIds)->find()->getData();

        foreach ($businessUnitData as $businessUnitDatum) {
            $this->tester->haveCompanyUser([
                CompanyUserTransfer::COMPANY_BUSINESS_UNIT => (new CompanyBusinessUnitTransfer())->setIdCompanyBusinessUnit($businessUnitDatum[SpyCompanyBusinessUnitTableMap::COL_ID_COMPANY_BUSINESS_UNIT]),
                CompanyUserTransfer::FK_COMPANY => $businessUnitDatum[SpyCompanyBusinessUnitTableMap::COL_FK_COMPANY],
                CompanyUserTransfer::COMPANY => (new CompanyTransfer())->setIdCompany($businessUnitDatum[SpyCompanyBusinessUnitTableMap::COL_FK_COMPANY]),
                CompanyUserTransfer::CUSTOMER => $customerTransfer,
            ]);
        }

        $this->assertTrue(
            false,
            sprintf('%s %s', SspTester::GENERATION_RESULT_TEXT, sprintf('%d companies generated. %d companies to generate left', count($createdCompanyIds), self::COMPANY_COUNT - $existingCompanyCount - count($createdCompanyIds))),
        );
    }
}
