<?php

/**
 * This file is part of the Spryker Suite.
 * For full license information, please view the LICENSE file that was distributed with this source code.
 */

declare(strict_types = 1);

namespace VolumeDataGenerationTest\Zed\Ssp;

use Codeception\Test\Unit;
use Generated\Shared\DataBuilder\MerchantProfileBuilder;
use Generated\Shared\Transfer\MerchantTransfer;
use Generated\Shared\Transfer\StoreRelationTransfer;
use Generated\Shared\Transfer\StoreTransfer;
use Orm\Zed\SspServiceManagement\Persistence\SpyProductAbstractToProductAbstractTypeQuery;
use Orm\Zed\SspServiceManagement\Persistence\SpyProductAbstractTypeQuery;
use Orm\Zed\Store\Persistence\SpyStoreQuery;
use Orm\Zed\Tax\Persistence\SpyTaxSetQuery;

/**
 * Generates service products with product offers, prices and stocks.
 *
 * Recommendation: run it before generation ssp-asset-service relation.
 *
 * @group VolumeDataGenerationTest
 * @group Ssp
 * @group SspVolumeServiceTest
 * @group Services
 */
class SspVolumeServiceTest extends Unit
{
    /**
     * Total amount of services: product concrete, product abstract, product offer...... which will be generated by the test run.
     *
     * @var int
     */
    /**
     * @var int
     */ protected const SERVICE_COUNT = 30000;

    /**
     * @var int
     */
    /**
     * Amount of orders with service product which will be generated by the test run.
     *
     * @var int
     */
    protected const SERVICE_ORDER_COUNT = 20;

    /**
     * @var int
     */
    /**
     * Used for speeding up generation and avoiding memory issues.
     *
     * @var int
     */
    protected const BATCH_SIZE = 1000;

    /**
     * @var string
     */
    protected const CUSTOMER_EMAIL = 'ssp-service@volume.data';

    /**
     * @var \VolumeDataGenerationTest\Zed\Ssp\SspTester
     */
    protected SspTester $tester;

    /**
     * @return void
     */
    public function testGenerateServices(): void
    {
        $serviceProductTypeEntity = SpyProductAbstractTypeQuery::create()->findOneByName('service');
        if (!$serviceProductTypeEntity) {
            $this->tester->haveProductAbstractType([
                'name' => 'service',
            ]);

            $serviceProductTypeEntity = SpyProductAbstractTypeQuery::create()->findOneByName('service');
        }

        $existingServiceProductCount = SpyProductAbstractToProductAbstractTypeQuery::create()
            ->filterByFkProductAbstractType($serviceProductTypeEntity->getIdProductAbstractType())->count();

        if ($existingServiceProductCount >= self::SERVICE_COUNT) {
            $this->assertTrue(false, SspTester::ALL_ENTITIES_GENERATED_MESSAGE);

            return;
        }

        $taxSetEntity = SpyTaxSetQuery::create()->findOne();

        $storeTransfer = (new StoreTransfer())->setName('DE')->setIdStore(
            SpyStoreQuery::create()->findOneByName('DE')->getIdStore(),
        );

        $merchantTransfer = $this->tester->haveMerchant([
            MerchantTransfer::MERCHANT_PROFILE => (new MerchantProfileBuilder([]))->build(),
            MerchantTransfer::IS_ACTIVE => true,
            MerchantTransfer::STATUS => 'approved',
            MerchantTransfer::STORE_RELATION => [
        StoreRelationTransfer::STORES => [
                $storeTransfer,
            ]],
        ]);

        for ($i = 0; $i < min(self::SERVICE_COUNT - $existingServiceProductCount, self::BATCH_SIZE); $i++) { // phpcs:ignore Generic.CodeAnalysis.ForLoopWithTestFunctionCall
            $this->tester->generateService($storeTransfer, $taxSetEntity, $serviceProductTypeEntity, $merchantTransfer);
        }

        $this->assertTrue(
            false,
            sprintf('%s %s', SspTester::GENERATION_RESULT_TEXT, sprintf('%d services were generated. Left to generate %d services.', min(self::SERVICE_COUNT - $existingServiceProductCount, self::BATCH_SIZE), self::SERVICE_COUNT - $existingServiceProductCount - min(self::SERVICE_COUNT - $existingServiceProductCount, self::BATCH_SIZE))),
        );
    }
}
